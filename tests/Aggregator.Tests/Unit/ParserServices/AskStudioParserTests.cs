using Aggregator.ParserServices;
using Aggregator.Tests.Fixtures;
using Aggregator.Tests.Helpers;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using Aggregator.Services;
using HtmlAgilityPack;
using System.Threading.Tasks;

namespace Aggregator.Tests.Unit.ParserServices;

/// <summary>
/// Unit —Ç–µ—Å—Ç—ã –¥–ª—è AskStudioParser
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ HTML –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∏–ª–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
/// </summary>
public class AskStudioParserTests : IDisposable
{
    private readonly DatabaseFixture _databaseFixture;
    private readonly Mock<IHttpClientFactory> _mockHttpFactory;
    private readonly Mock<ILogger<AskStudioParser>> _mockLogger;
    private readonly ImageService _imageService;
    private readonly MockedAskStudioParser _mockedAskParser;

    public AskStudioParserTests()
    {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        _databaseFixture = new DatabaseFixture();
        _mockHttpFactory = new Mock<IHttpClientFactory>();
        _mockLogger = new Mock<ILogger<AskStudioParser>>();

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ ImageService —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        var mockImageHttpFactory = new Mock<IHttpClientFactory>();
        var mockImageLogger = new Mock<ILogger<ImageService>>();
        _imageService = new ImageService(mockImageHttpFactory.Object, mockImageLogger.Object);

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
        _mockedAskParser = new MockedAskStudioParser(
            _databaseFixture.Context,
            _mockHttpFactory.Object,
            _mockLogger.Object,
            _imageService
        );
    }

    [Fact]
    public void ShopName_ShouldReturnCorrectValue()
    {
        // Act
        var shopName = _mockedAskParser.ShopName;

        // Assert
        shopName.Should().Be("Ask Studio");
    }

    [Fact]
    public void MockedParser_ShouldHaveFileBasedUrl()
    {
        // Act
        var fileBasedUrl = _mockedAskParser.GetBaseUrl();

        // Assert
        fileBasedUrl.Should().Be("file://" + TestDataHelper.GetTestFilePath("HtmlPages/askstudio/main_shop_page.html"));
    }

    [Fact]
    public void Parser_Selectors_ShouldHaveProductSelector()
    // TODO: add test for other selectors
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ protected —Å–≤–æ–π—Å—Ç–≤ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ –ø–∞—Ä—Å–µ—Ä–µ)
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

        // Assert
        _mockedAskParser.GetProductSelector().Should().NotBeNullOrEmpty();
    }

    [Fact]
    public async Task ParseProducts_WithRealHtmlData_ShouldExtractProductsNames()
    {
        // Arrange
        var products = await _mockedAskParser.ParseProducts();

        // Assert
        products.Should().NotBeNull();
        // _mockLogger.
        Console.WriteLine("Products count: " + products.Count);
        products.Should().HaveCountGreaterThan(0);
        products.Should().OnlyContain(p => !string.IsNullOrEmpty(p.Name));
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ —Å –†–ï–ê–õ–¨–ù–´–ú –ª–æ–≥–≥–µ—Ä–æ–º - –ª–æ–≥–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
    /// </summary>
    [Fact]
    public async Task ParseProducts_WithRealLogger_ShouldShowLogsInConsole()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        var realLogger = TestLogger.Create<AskStudioParser>();
        
        var parserWithRealLogger = new MockedAskStudioParser(
            _databaseFixture.Context,
            _mockHttpFactory.Object,
            realLogger, // –†–ï–ê–õ–¨–ù–´–ô –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ –º–æ–∫–∞!
            _imageService
        );

        realLogger.LogInformation("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º");

        // Act
        var products = await parserWithRealLogger.ParseProducts();

        // Assert
        products.Should().NotBeNull();
        realLogger.LogInformation("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {ProductCount}", products.Count);
        
        products.Should().HaveCountGreaterThan(0);
        realLogger.LogInformation("üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    }

    /// <summary>
    /// –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô —Å–ø–æ—Å–æ–± –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã Log
    /// </summary>
    [Fact]
    public async Task ParseProducts_WithSimpleLogging_SuperEasy()
    {
        Log.Info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –ª–æ–≥–∞–º–∏");
        
        // Arrange
        Log.Debug("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...");
        var products = await _mockedAskParser.ParseProducts();

        // Act & Assert
        products.Should().NotBeNull();
        Log.Info("–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {0}", products.Count);
        
        if (products.Count > 0)
        {
            Log.Info("–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {0}", products[0].Name);
            Log.Info("–¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {0}", products[0].Price);
        }

        products.Should().HaveCountGreaterThan(0);
        Log.Info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!");
    }

    [Fact]
    public void MockedParser_ShouldUseLocalHtmlFiles()
    {
        // Arrange & Act
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

        // Assert
        _mockedAskParser.Should().NotBeNull();
        _mockedAskParser.ShopName.Should().Be("Ask Studio");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π HTML —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        TestDataHelper.TestFileExists("HtmlPages/askstudio/main_shop_page.html")
            .Should().BeTrue("–¢–µ—Å—Ç–æ–≤—ã–π HTML —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
    }

    public void Dispose()
    {
        _databaseFixture.Dispose();
    }
}