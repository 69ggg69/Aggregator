using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Net;
using Aggregator.Data;
using Aggregator.Services;
using Aggregator.ParserServices;
using Aggregator.Interfaces;

namespace Aggregator
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var host = CreateHostBuilder(args).Build();
            
            try
            {
                var logger = host.Services.GetRequiredService<ILogger<Program>>();
                logger.LogInformation("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Aggregator —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–º API)
                await ShowMainMenuAsync(host, logger);
            }
            catch (Exception ex)
            {
                var logger = host.Services.GetRequiredService<ILogger<Program>>();
                logger.LogError(ex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                throw;
            }
        }

        static async Task ShowMainMenuAsync(IHost host, ILogger logger)
        {
            while (true)
            {
                Console.WriteLine("\n=== Aggregator - Product Parser ===");
                Console.WriteLine("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥");
                Console.WriteLine("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î");
                Console.WriteLine("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
                Console.WriteLine("0. –í—ã—Ö–æ–¥");
                Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        await RunParsingAsync(host, logger);
                        break;
                    case "2":
                        await CheckDatabaseConnectionAsync(host, logger);
                        break;
                    case "3":
                        await ShowStatisticsAsync(host, logger);
                        break;
                    case "0":
                        logger.LogInformation("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                        return;
                    default:
                        Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        break;
                }
            }
        }

        static async Task RunParsingAsync(IHost host, ILogger logger)
        {
            try
            {
                logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                var parsingService = host.Services.GetRequiredService<ParsingApplicationService>();
                await parsingService.RunParsingAsync();
                logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞");
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        static async Task CheckDatabaseConnectionAsync(IHost host, ILogger logger)
        {
            try
            {
                using var scope = host.Services.CreateScope();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                
                Console.WriteLine("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
                
                // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π SQL –∑–∞–ø—Ä–æ—Å
                var startTime = DateTime.Now;
                await dbContext.Database.ExecuteSqlRawAsync("SELECT 1");
                var endTime = DateTime.Now;
                var responseTime = (endTime - startTime).TotalMilliseconds;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                var productsCount = await dbContext.Products.CountAsync();
                
                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ");
                Console.WriteLine($"   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {responseTime:F2} –º—Å");
                Console.WriteLine($"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {productsCount}");
                
                logger.LogInformation("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î - —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ResponseTime}ms, —Ç–æ–≤–∞—Ä–æ–≤: {ProductsCount}", 
                    responseTime, productsCount);
            }
            catch (Npgsql.NpgsqlException pgEx)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {pgEx.Message}");
                if (pgEx.Message.Contains("No connection could be made") || 
                    pgEx.Message.Contains("Connection refused") ||
                    pgEx.Message.Contains("could not connect to server"))
                {
                    Console.WriteLine("   üí° –í–æ–∑–º–æ–∂–Ω–æ, Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω");
                    Console.WriteLine("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d postgres");
                }
                logger.LogError(pgEx, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL");
            }
            catch (System.Net.Sockets.SocketException sockEx)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {sockEx.Message}");
                Console.WriteLine("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ—Ä—Ç 5432 –¥–æ—Å—Ç—É–ø–µ–Ω");
                logger.LogError(sockEx, "–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            }
            catch (TimeoutException timeEx)
            {
                Console.WriteLine($"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {timeEx.Message}");
                Console.WriteLine("   üí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞");
                logger.LogError(timeEx, "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {ex.Message}");
                Console.WriteLine($"   –¢–∏–ø –æ—à–∏–±–∫–∏: {ex.GetType().Name}");
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"   –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {ex.InnerException.Message}");
                }
                
                logger.LogError(ex, "–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            }
        }

        static async Task ShowStatisticsAsync(IHost host, ILogger logger)
        {
            try
            {
                using var scope = host.Services.CreateScope();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                
                var totalProducts = await dbContext.Products.CountAsync();
                var lastParseDate = await dbContext.Products
                    .OrderByDescending(p => p.ParseDate)
                    .Select(p => (DateTime?)p.ParseDate)
                    .FirstOrDefaultAsync();

                Console.WriteLine($"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                Console.WriteLine($"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {totalProducts}");
                Console.WriteLine($"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {(lastParseDate?.ToString("dd.MM.yyyy HH:mm") ?? "–ù–µ –±—ã–ª–æ")}");
                
                logger.LogInformation("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç–æ–≤–∞—Ä–æ–≤ {TotalProducts}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ {LastParseDate}", 
                    totalProducts, lastParseDate);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
                logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            }
        }

        static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((context, config) =>
                {
                    config.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
                    config.AddJsonFile($"appsettings.{context.HostingEnvironment.EnvironmentName}.json", 
                                     optional: true, reloadOnChange: true);
                })
                .ConfigureServices((context, services) =>
                {
                    // Database
                    services.AddDbContext<ApplicationDbContext>(options =>
                        options.UseNpgsql(context.Configuration.GetConnectionString("DefaultConnection")));
                    
                    // HTTP Client
                    var handler = new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true,
                        SslProtocols = System.Security.Authentication.SslProtocols.Tls12 | System.Security.Authentication.SslProtocols.Tls13,
                        UseProxy = false, 
                        AutomaticDecompression = DecompressionMethods.All
                    };

                    services.AddHttpClient("SafeHttpClient")
                        .ConfigurePrimaryHttpMessageHandler(() => handler)
                        .SetHandlerLifetime(TimeSpan.FromMinutes(5));
                    
                    // Application Services
                    services.AddScoped<ParsingApplicationService>();
                    services.AddScoped<ImageService>();
                    services.AddScoped<AskStudioParser>();
                    services.AddScoped<ZnwrParser>();
                    services.AddScoped<ParserManager>();
                    services.AddScoped<IEnumerable<IParser>>(sp => new List<IParser>
                    {
                        sp.GetRequiredService<AskStudioParser>(),
                        sp.GetRequiredService<ZnwrParser>()
                    });
                })
                .ConfigureLogging((context, logging) =>
                {
                    logging.ClearProviders();
                    logging.AddConsole();
                    logging.AddDebug();
                    logging.SetMinimumLevel(LogLevel.Information);
                });
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    /// </summary>
    public class ParsingApplicationService
    {
        private readonly ParserManager _parserManager;
        private readonly ApplicationDbContext _dbContext;
        private readonly ILogger<ParsingApplicationService> _logger;

        public ParsingApplicationService(
            ParserManager parserManager, 
            ApplicationDbContext dbContext,
            ILogger<ParsingApplicationService> logger)
        {
            _parserManager = parserManager;
            _dbContext = dbContext;
            _logger = logger;
        }

        public async Task RunParsingAsync()
        {
            try
            {
                _logger.LogInformation("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...");
                await _parserManager.ParseAllSites();

                var allProducts = await _dbContext.Products
                    .OrderByDescending(p => p.ParseDate)
                    .ToListAsync();

                _logger.LogInformation("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {ProductCount}", allProducts.Count);

                Console.WriteLine("\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
                Console.WriteLine("==========================");
                
                if (!allProducts.Any())
                {
                    Console.WriteLine("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                }
                else
                {
                    foreach (var product in allProducts)
                    {
                        var imageInfo = !string.IsNullOrEmpty(product.LocalImagePath) 
                            ? $" [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {product.LocalImagePath}]" 
                            : " [–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]";
                        Console.WriteLine($"{product.Shop} - {product.Name}: {product.Price}{imageInfo} (—Å–ø–∞—Ä—à–µ–Ω–æ: {product.ParseDate})");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞");
                
                Console.WriteLine($"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {ex.InnerException.Message}");
                    Console.WriteLine($"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {ex.InnerException.StackTrace}");
                }
                throw;
            }
        }
    }
}
