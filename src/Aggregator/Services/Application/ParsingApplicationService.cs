using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Aggregator.Data;
using Aggregator.Services;
using Aggregator.Models;
using Aggregator.Interfaces;

namespace Aggregator.Services.Application
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    /// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    /// </summary>
    public class ParsingApplicationService(
        IParser parser,
        BasicParsingService basicParsingService,
        DetailedParsingService detailedParsingService,
        ApplicationDbContext dbContext,
        ILogger<ParsingApplicationService> logger)
    {
        private readonly IParser _parser = parser;
        private readonly BasicParsingService _basicParsingService = basicParsingService;
        private readonly DetailedParsingService _detailedParsingService = detailedParsingService;
        private readonly ApplicationDbContext _dbContext = dbContext;
        private readonly ILogger<ParsingApplicationService> _logger = logger;

        /// <summary>
        /// –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å
        /// </summary>
        public string ShopName => _parser.ShopName;

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        /// </summary>
        public async Task<BasicParsingResult> RunBasicParsingAsync()
        {
            try
            {
                _logger.LogInformation("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
                
                var result = await _basicParsingService.ParseBasicProductsAsync(_parser);
                
                if (result.Success)
                {
                    _logger.LogInformation("‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}: –Ω–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤", 
                        ShopName, result.ProductCount);
                    
                    await DisplayBasicResultsAsync(result);
                }
                else
                {
                    _logger.LogError("‚ùå –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É—Å–ø–µ—à–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}: {error}", 
                        ShopName, result.Error);
                }
                
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–∑–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
                throw;
            }
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–µ—Ä–µ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        /// </summary>
        public async Task<StreamingBasicParsingResult> RunStreamingBasicParsingAsync()
        {
            try
            {
                _logger.LogInformation("üåä –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
                
                var result = await _basicParsingService.ParseAndSaveBasicProductsStreamAsync(_parser);
                
                if (result.Success)
                {
                    _logger.LogInformation("‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}: " +
                                         "–Ω–∞–π–¥–µ–Ω–æ {total}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}, –æ—à–∏–±–æ–∫ {failed}", 
                        ShopName, result.TotalParsedCount, result.SavedCount, result.SkippedCount, result.FailedCount);
                    
                    await DisplayStreamingResultsAsync(result);
                }
                else
                {
                    _logger.LogError("‚ùå –ü–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É—Å–ø–µ—à–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}: {error}", 
                        ShopName, result.Error);
                }
                
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–º –±–∞–∑–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
                throw;
            }
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        /// TODO: –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
        /// </summary>
        public async Task<DetailedParsingResult> RunFullParsingAsync()
        {
            _logger.LogInformation("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
            
            // –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            var basicResult = await RunBasicParsingAsync();
            
            if (!basicResult.Success || basicResult.BasicProducts.Count == 0)
            {
                _logger.LogWarning("‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥");
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                return new DetailedParsingResult
                {
                    ShopName = ShopName,
                    Success = basicResult.Success,
                    Error = basicResult.Error,
                    StartTime = basicResult.StartTime,
                    EndTime = basicResult.EndTime
                };
            }

            // TODO: –≠—Ç–∞–ø 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–∑–∞–≥–ª—É—à–∫–∞)
            _logger.LogInformation("üîç TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {count} —Ç–æ–≤–∞—Ä–æ–≤", 
                basicResult.BasicProducts.Count);
            
            // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            return new DetailedParsingResult
            {
                ShopName = ShopName,
                ProcessedCount = basicResult.ProductCount,
                AddedCount = 0, // TODO: –ü–æ–∫–∞ 0, –ø–æ—Ç–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                Success = true,
                StartTime = basicResult.StartTime,
                EndTime = DateTime.UtcNow
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        /// </summary>
        public async Task<ShopStatistics> GetShopStatisticsAsync()
        {
            try
            {
                var productCount = await _dbContext.Products
                    .Include(p => p.Shop)
                    .Where(p => p.Shop.Name == ShopName)
                    .CountAsync();

                var lastUpdate = await _dbContext.Products
                    .Include(p => p.Shop)
                    .Where(p => p.Shop.Name == ShopName)
                    .OrderByDescending(p => p.CreatedAt)
                    .Select(p => (DateTime?)p.CreatedAt)
                    .FirstOrDefaultAsync();

                return new ShopStatistics
                {
                    ShopName = ShopName,
                    ProductCount = productCount,
                    LastUpdate = lastUpdate ?? DateTime.MinValue
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {ShopName}", ShopName);
                throw;
            }
        }

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
        /// </summary>
        private async Task DisplayBasicResultsAsync(BasicParsingResult result)
        {
            Console.WriteLine($"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ShopName} ===");
            Console.WriteLine($"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.ProductCount}");
            Console.WriteLine($"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.Duration.TotalSeconds:F2} —Å–µ–∫");
            
            if (result.BasicProducts.Count > 0)
            {
                Console.WriteLine("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è):");
                foreach (var product in result.BasicProducts.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                {
                    Console.WriteLine($"- {product.Name}");
                    if (!string.IsNullOrEmpty(product.ProductUrl))
                        Console.WriteLine($"  URL: {product.ProductUrl}");
                }
                
                if (result.BasicProducts.Count > 5)
                {
                    Console.WriteLine($"... –∏ –µ—â—ë {result.BasicProducts.Count - 5} —Ç–æ–≤–∞—Ä–æ–≤");
                }
            }
            
            await Task.CompletedTask; // –î–ª—è async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
        /// </summary>
        private async Task DisplayStreamingResultsAsync(StreamingBasicParsingResult result)
        {
            Console.WriteLine($"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ShopName} ===");
            Console.WriteLine($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            Console.WriteLine($"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.TotalParsedCount}");
            Console.WriteLine($"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result.SavedCount}");
            Console.WriteLine($"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {result.SkippedCount}");
            Console.WriteLine($"   –û—à–∏–±–æ–∫: {result.FailedCount}");
            Console.WriteLine($"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.SuccessRate:F1}%");
            Console.WriteLine($"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.Duration.TotalSeconds:F2} —Å–µ–∫");
            
            if (result.SavedProducts.Count > 0)
            {
                Console.WriteLine("\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:");
                foreach (var product in result.SavedProducts.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                {
                    Console.WriteLine($"   - {product.Name}");
                    if (!string.IsNullOrEmpty(product.ProductUrl))
                        Console.WriteLine($"     URL: {product.ProductUrl}");
                }
                
                if (result.SavedProducts.Count > 5)
                {
                    Console.WriteLine($"   ... –∏ –µ—â—ë {result.SavedProducts.Count - 5} —Ç–æ–≤–∞—Ä–æ–≤");
                }
            }

            if (result.Errors.Count > 0)
            {
                Console.WriteLine("\n‚ùå –û—à–∏–±–∫–∏:");
                foreach (var error in result.Errors.Take(3)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                {
                    Console.WriteLine($"   - {error}");
                }
                
                if (result.Errors.Count > 3)
                {
                    Console.WriteLine($"   ... –∏ –µ—â—ë {result.Errors.Count - 3} –æ—à–∏–±–æ–∫");
                }
            }
            
            await Task.CompletedTask; // –î–ª—è async —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
    }
} 