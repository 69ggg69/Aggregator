using Aggregator.Interfaces;
using Aggregator.Models;
using Microsoft.Extensions.Logging;

namespace Aggregator.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
/// </summary>
public class DetailedParsingService(IDatabaseService databaseService, ILogger<DetailedParsingService> logger)
{
    private readonly IDatabaseService _databaseService = databaseService;
    private readonly ILogger<DetailedParsingService> _logger = logger;

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    /// </summary>
    /// <param name="parser">–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</param>
    /// <param name="basicProducts">–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</returns>
    public async Task<DetailedParsingResult> ParseDetailedProductsAsync(IParser parser, List<Product> basicProducts)
    {
        var startTime = DateTime.UtcNow;
        _logger.LogInformation("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {count} —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", 
            basicProducts.Count, parser.ShopName);

        try
        {
            // –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            var detailedProducts = new List<Product>();
            for (int i = 0; i < basicProducts.Count; i++)
            {
                var product = basicProducts[i];
                _logger.LogInformation("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {index}/{total}: {productName}",
                    i + 1, basicProducts.Count, product.Name);
                
                var detailedProduct = await parser.ParseDetailedProductAsync(product);
                detailedProducts.Add(detailedProduct);
            }

            _logger.LogInformation("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {count} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                detailedProducts.Count, parser.ShopName);

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
            var existingProducts = await _databaseService.Products.GetProductsByShopAsync(parser.ShopName);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏)
            var newProducts = detailedProducts
                .Where(p => !existingProducts.Any(ep => ep.Name == p.Name))
                .ToList();

            _logger.LogInformation("üÜï –ù–∞–π–¥–µ–Ω–æ {newCount} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {totalCount} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                newProducts.Count, detailedProducts.Count, parser.ShopName);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
            var addedCount = 0;
            if (newProducts.Count > 0)
            {
                addedCount = await _databaseService.Products.AddProductsAsync(newProducts);
                _logger.LogInformation("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {addedCount} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                    addedCount, parser.ShopName);
            }
            else
            {
                _logger.LogInformation("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);
            }

            return new DetailedParsingResult
            {
                ShopName = parser.ShopName,
                DetailedProducts = detailedProducts,
                ProcessedCount = detailedProducts.Count,
                AddedCount = addedCount,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = true
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

            return new DetailedParsingResult
            {
                ShopName = parser.ShopName,
                DetailedProducts = new List<Product>(),
                ProcessedCount = 0,
                AddedCount = 0,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = false,
                Error = ex.Message
            };
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    /// </summary>
    /// <param name="parser">–ü–∞—Ä—Å–µ—Ä</param>
    /// <param name="basicResults">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</returns>
    public async Task<List<DetailedParsingResult>> ParseMultipleShopsDetailedAsync(
        IEnumerable<IParser> parsers, 
        List<BasicParsingResult> basicResults)
    {
        var results = new List<DetailedParsingResult>();
        var parsersList = parsers.ToList();

        foreach (var basicResult in basicResults.Where(r => r.Success && r.BasicProducts.Count > 0))
        {
            var parser = parsersList.FirstOrDefault(p => p.ShopName == basicResult.ShopName);
            if (parser == null)
            {
                _logger.LogWarning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", basicResult.ShopName);
                continue;
            }

            var result = await ParseDetailedProductsAsync(parser, basicResult.BasicProducts);
            results.Add(result);
        }

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        var totalProcessed = results.Sum(r => r.ProcessedCount);
        var totalAdded = results.Sum(r => r.AddedCount);
        var successCount = results.Count(r => r.Success);

        _logger.LogInformation("üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {successCount}/{totalCount} –º–∞–≥–∞–∑–∏–Ω–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {totalProcessed} —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ {totalAdded}",
            successCount, results.Count, totalProcessed, totalAdded);

        return results;
    }
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
/// </summary>
public class DetailedParsingResult
{
    public string ShopName { get; set; } = string.Empty;
    public List<Product> DetailedProducts { get; set; } = new();
    public int ProcessedCount { get; set; }
    public int AddedCount { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Success { get; set; }
    public string? Error { get; set; }

    public TimeSpan Duration => EndTime - StartTime;
} 