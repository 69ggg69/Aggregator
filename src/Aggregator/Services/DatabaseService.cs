using Aggregator.Data;
using Aggregator.Interfaces;
using Aggregator.Models;
using Aggregator.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace Aggregator.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
/// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
/// </summary>
public class DatabaseService : IDatabaseService
{
    private readonly ApplicationDbContext _context;
    private readonly IProductRepository _productRepository;
    private readonly ILogger<DatabaseService> _logger;

    public DatabaseService(
        ApplicationDbContext context,
        IProductRepository productRepository,
        ILogger<DatabaseService> logger)
    {
        _context = context;
        _productRepository = productRepository;
        _logger = logger;
    }

    /// <summary>
    /// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    /// </summary>
    public IProductRepository Products => _productRepository;

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    public async Task<bool> CheckConnectionAsync()
    {
        try
        {
            Log.Info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
            var stopwatch = Stopwatch.StartNew();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await _context.Database.ExecuteSqlRawAsync("SELECT 1");
            
            stopwatch.Stop();
            
            _logger.LogInformation("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ResponseTime}ms", 
                stopwatch.ElapsedMilliseconds);
            
            Log.Success($"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç–∫–ª–∏–∫: {stopwatch.ElapsedMilliseconds}ms)");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            Log.Error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", ex);
            return false;
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    public async Task<bool> MigrateDatabaseAsync()
    {
        try
        {
            Log.Info("üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
            
            var pendingMigrations = await _context.Database.GetPendingMigrationsAsync();
            if (pendingMigrations.Any())
            {
                _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ {count} –æ–∂–∏–¥–∞—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π", pendingMigrations.Count());
                
                foreach (var migration in pendingMigrations)
                {
                    _logger.LogDebug("–û–∂–∏–¥–∞—é—â–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {migration}", migration);
                }

                await _context.Database.MigrateAsync();
                Log.Success("–ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
            }
            else
            {
                Log.Info("–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
            }

            _logger.LogInformation("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π");
            Log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π", ex);
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    public async Task<DatabaseInfo> GetDatabaseInfoAsync()
    {
        var info = new DatabaseInfo();
        var stopwatch = Stopwatch.StartNew();

        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await _context.Database.ExecuteSqlRawAsync("SELECT 1");
            info.IsConnected = true;
            stopwatch.Stop();
            info.ResponseTimeMs = stopwatch.ElapsedMilliseconds;

            // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ë–î
            try
            {
                var versionResult = await _context.Database
                    .SqlQueryRaw<string>("SELECT version()")
                    .ToListAsync();
                info.DatabaseVersion = versionResult.FirstOrDefault() ?? "Unknown";
            }
            catch
            {
                info.DatabaseVersion = "Unable to determine";
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            var appliedMigrations = await _context.Database.GetAppliedMigrationsAsync();
            var pendingMigrations = await _context.Database.GetPendingMigrationsAsync();
            
            info.AppliedMigrations = appliedMigrations.ToList();
            info.MigrationsApplied = !pendingMigrations.Any();

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            try
            {
                var tablesCount = await _context.Database
                    .SqlQueryRaw<int>("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
                    .FirstAsync();
                info.TablesCount = tablesCount;
            }
            catch
            {
                info.TablesCount = 0;
            }

            _logger.LogDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î –ø–æ–ª—É—á–µ–Ω–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ={IsConnected}, –≤–µ—Ä—Å–∏—è={Version}, –º–∏–≥—Ä–∞—Ü–∏–∏={MigrationsApplied}", 
                info.IsConnected, info.DatabaseVersion, info.MigrationsApplied);

        }
        catch (Exception ex)
        {
            info.IsConnected = false;
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î");
        }

        return info;
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    /// </summary>
    public async Task<T> ExecuteInTransactionAsync<T>(Func<Task<T>> operation)
    {
        _logger.LogDebug("–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é");
        
        using var transaction = await _context.Database.BeginTransactionAsync();
        try
        {
            var result = await operation();
            await transaction.CommitAsync();
            
            _logger.LogDebug("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è");
            await transaction.RollbackAsync();
            throw;
        }
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    /// </summary>
    public async Task ClearAllDataAsync()
    {
        try
        {
            Log.Warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!");
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            var products = await _context.Products.ToListAsync();
            if (products.Any())
            {
                _context.Products.RemoveRange(products);
                var deletedCount = await _context.SaveChangesAsync();
                
                _logger.LogWarning("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", deletedCount);
                Log.Warning($"–£–¥–∞–ª–µ–Ω–æ {deletedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î");
            }
            else
            {
                Log.Info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
            Log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î", ex);
            throw;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    public async Task<bool> CreateBackupAsync(string backupPath)
    {
        try
        {
            Log.Info($"üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ {backupPath}");
            
            // –î–ª—è PostgreSQL –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pg_dump
            // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
            var products = await _context.Products.ToListAsync();
            
            var backupData = new
            {
                BackupDate = DateTime.UtcNow,
                ProductsCount = products.Count,
                Products = products.Select(p => new 
                {
                    p.Id,
                    p.Name,
                    p.Price,
                    p.Shop,
                    p.ParseDate,
                    p.ImageUrl,
                    p.LocalImagePath
                })
            };

            var json = System.Text.Json.JsonSerializer.Serialize(backupData, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true 
            });

            await File.WriteAllTextAsync(backupPath, json);
            
            _logger.LogInformation("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backupPath}, —Ç–æ–≤–∞—Ä–æ–≤: {count}", 
                backupPath, products.Count);
            
            Log.Success($"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ ({products.Count} —Ç–æ–≤–∞—Ä–æ–≤)");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏");
            Log.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", ex);
            return false;
        }
    }
} 