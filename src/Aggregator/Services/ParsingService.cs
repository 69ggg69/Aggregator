using Aggregator.Interfaces;
using Aggregator.Models;
using Microsoft.Extensions.Logging;

namespace Aggregator.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/// –†–∞–∑–¥–µ–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –ø–∞—Ä—Å–µ—Ä –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, DatabaseService —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î
/// </summary>
public class ParsingService
{
    private readonly IDatabaseService _databaseService;
    private readonly ILogger<ParsingService> _logger;

    public ParsingService(IDatabaseService databaseService, ILogger<ParsingService> logger)
    {
        _databaseService = databaseService;
        _logger = logger;
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:
    /// 1. –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–π—Ç–∞
    /// 2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ë–î
    /// 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    /// </summary>
    /// <param name="parser">–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞</returns>
    public async Task<ParsingResult> ParseShopAsync(IParser parser)
    {
        var startTime = DateTime.UtcNow;
        _logger.LogInformation("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

        try
        {
            // 1. –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–π—Ç–∞
            var parsedProducts = await parser.ParseProducts();
            _logger.LogInformation("üì¶ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {count} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ {shopName}",
                parsedProducts.Count, parser.ShopName);

            if (parsedProducts.Count == 0)
            {
                _logger.LogWarning("‚ö†Ô∏è  –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ {shopName}", parser.ShopName);
                return new ParsingResult
                {
                    ShopName = parser.ShopName,
                    ParsedCount = 0,
                    AddedCount = 0,
                    StartTime = startTime,
                    EndTime = DateTime.UtcNow,
                    Success = true
                };
            }

            // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
            var existingProducts = await _databaseService.Products.GetProductsByShopAsync(parser.ShopName);

            // 3. –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏)
            // TODO: –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ ProductVariants
            var newProducts = parsedProducts
                .Where(p => !existingProducts.Any(ep => ep.Name == p.Name))
                .ToList();

            _logger.LogInformation("üÜï –ù–∞–π–¥–µ–Ω–æ {newCount} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {totalCount} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                newProducts.Count, parsedProducts.Count, parser.ShopName);

            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
            var addedCount = 0;
            if (newProducts.Count > 0)
            {
                addedCount = await _databaseService.Products.AddProductsAsync(newProducts);
                _logger.LogInformation("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {addedCount} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                    addedCount, parser.ShopName);
            }
            else
            {
                _logger.LogInformation("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);
            }

            return new ParsingResult
            {
                ShopName = parser.ShopName,
                ParsedCount = parsedProducts.Count,
                AddedCount = addedCount,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = true
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

            return new ParsingResult
            {
                ShopName = parser.ShopName,
                ParsedCount = 0,
                AddedCount = 0,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = false,
                Error = ex.Message
            };
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    /// </summary>
    /// <param name="parsers">–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</returns>
    public async Task<List<ParsingResult>> ParseMultipleShopsAsync(IEnumerable<IParser> parsers)
    {
        var results = new List<ParsingResult>();

        foreach (var parser in parsers)
        {
            var result = await ParseShopAsync(parser);
            results.Add(result);
        }

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        var totalParsed = results.Sum(r => r.ParsedCount);
        var totalAdded = results.Sum(r => r.AddedCount);
        var successCount = results.Count(r => r.Success);

        _logger.LogInformation("üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {successCount}/{totalCount} –º–∞–≥–∞–∑–∏–Ω–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {totalParsed} —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ {totalAdded}",
            successCount, results.Count, totalParsed, totalAdded);

        return results;
    }
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
/// </summary>
public class ParsingResult
{
    public string ShopName { get; set; } = string.Empty;
    public int ParsedCount { get; set; }
    public int AddedCount { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Success { get; set; }
    public string? Error { get; set; }

    public TimeSpan Duration => EndTime - StartTime;
}