using Aggregator.Interfaces;
using Aggregator.Models;
using Microsoft.Extensions.Logging;

namespace Aggregator.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤, —Å—Å—ã–ª–æ–∫ –∏ –∏—Ö –ø–æ—Ç–æ–∫–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
/// </summary>
public class BasicParsingService(IDatabaseService databaseService, ILogger<BasicParsingService> logger)
{
    private readonly IDatabaseService _databaseService = databaseService;
    private readonly ILogger<BasicParsingService> _logger = logger;

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    /// </summary>
    /// <param name="parser">–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</returns>
    public async Task<BasicParsingResult> ParseBasicProductsAsync(IParser parser)
    {
        var startTime = DateTime.UtcNow;
        _logger.LogInformation("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

        try
        {
            // –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å —Å–∞–π—Ç–∞
            var basicProducts = await parser.ParseBasicProductsAsync();
            _logger.LogInformation("üì¶ –ù–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) –Ω–∞ —Å–∞–π—Ç–µ {shopName}",
                basicProducts.Count, parser.ShopName);

            if (basicProducts.Count == 0)
            {
                _logger.LogWarning("‚ö†Ô∏è  –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ {shopName}", parser.ShopName);
            }

            return new BasicParsingResult
            {
                ShopName = parser.ShopName,
                BasicProducts = basicProducts,
                ProductCount = basicProducts.Count,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = true
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–∑–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

            return new BasicParsingResult
            {
                ShopName = parser.ShopName,
                BasicProducts = new List<Product>(),
                ProductCount = 0,
                StartTime = startTime,
                EndTime = DateTime.UtcNow,
                Success = false,
                Error = ex.Message
            };
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–µ—Ä–µ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    /// </summary>
    /// <param name="parser">–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</returns>
    public async Task<StreamingBasicParsingResult> ParseAndSaveBasicProductsStreamAsync(IParser parser)
    {
        var startTime = DateTime.UtcNow;
        _logger.LogInformation("üåä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

        var result = new StreamingBasicParsingResult
        {
            ShopName = parser.ShopName,
            StartTime = startTime,
            Success = true
        };

        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            var shop = await _databaseService.Products.EnsureShopExistsAsync(parser.ShopName, parser.ShopUrl);
            _logger.LogInformation("üè™ –ú–∞–≥–∞–∑–∏–Ω {shopName} –≥–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (ID: {shopId})", 
                parser.ShopName, shop.Id);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            var existingProductUrls = await _databaseService.Products.GetProductUrlsByShopAsync(parser.ShopName);
            _logger.LogInformation("üìã –ù–∞–π–¥–µ–Ω–æ {count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", 
                existingProductUrls.Count, parser.ShopName);

            // –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            var basicProducts = await parser.ParseBasicProductsAsync();
            _logger.LogInformation("üîç –°–ø–∞—Ä—à–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}",
                basicProducts.Count, parser.ShopName);

            result.TotalParsedCount = basicProducts.Count;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É
            foreach (var product in basicProducts)
            {
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ URL
                    if (!string.IsNullOrEmpty(product.ProductUrl) && 
                        existingProductUrls.Contains(product.ProductUrl))
                    {
                        _logger.LogDebug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ URL: {productName} - {productUrl}", 
                            product.Name, product.ProductUrl);
                        result.SkippedCount++;
                        continue;
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
                    product.ParsingStatus = ParsingStatus.BasicParsed;
                    product.ShopId = shop.Id;
                    product.CreatedAt = DateTime.UtcNow;
                    product.UpdatedAt = DateTime.UtcNow;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    var saved = await _databaseService.Products.AddProductAsync(product);
                    
                    if (saved)
                    {
                        _logger.LogDebug("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–≤–∞—Ä: {productName} - {productUrl}", 
                            product.Name, product.ProductUrl);
                        result.SavedCount++;
                        result.SavedProducts.Add(product);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                        if (!string.IsNullOrEmpty(product.ProductUrl))
                        {
                            existingProductUrls.Add(product.ProductUrl);
                        }
                    }
                    else
                    {
                        _logger.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä: {productName} - {productUrl}", 
                            product.Name, product.ProductUrl);
                        result.FailedCount++;
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {productName} - {productUrl}", 
                        product.Name, product.ProductUrl ?? "–Ω–µ—Ç URL");
                    result.FailedCount++;
                    result.Errors.Add($"–¢–æ–≤–∞—Ä '{product.Name}': {ex.Message}");
                }
            }

            result.EndTime = DateTime.UtcNow;
            
            _logger.LogInformation("üéØ –ü–æ—Ç–æ–∫–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}: " +
                                 "–Ω–∞–π–¥–µ–Ω–æ {totalCount}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {savedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skippedCount}, –æ—à–∏–±–æ–∫ {failedCount}",
                parser.ShopName, result.TotalParsedCount, result.SavedCount, result.SkippedCount, result.FailedCount);

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–º –±–∞–∑–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shopName}", parser.ShopName);

            result.Success = false;
            result.Error = ex.Message;
            result.EndTime = DateTime.UtcNow;
            
            return result;
        }
    }

}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
/// </summary>
public class StreamingBasicParsingResult
{
    public string ShopName { get; set; } = string.Empty;
    public List<Product> SavedProducts { get; set; } = new();
    public List<string> Errors { get; set; } = new();
    public int TotalParsedCount { get; set; }
    public int SavedCount { get; set; }
    public int SkippedCount { get; set; }
    public int FailedCount { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Success { get; set; }
    public string? Error { get; set; }

    public TimeSpan Duration => EndTime - StartTime;
    public double SuccessRate => TotalParsedCount > 0 ? (double)SavedCount / TotalParsedCount * 100 : 0;
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
/// </summary>
public class BasicParsingResult
{
    public string ShopName { get; set; } = string.Empty;
    public List<Product> BasicProducts { get; set; } = new();
    public int ProductCount { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Success { get; set; }
    public string? Error { get; set; }

    public TimeSpan Duration => EndTime - StartTime;
} 